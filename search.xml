<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Knives Out 電影心得</title>
    <url>/2020/04/05/knivesOut/</url>
    <content><![CDATA[<p>我不是專業影評人，純粹想紀錄一下看完這部電影的感受。朋友推薦我看，覺得很好看～來分享～<br>我的分數:8.5</p>
<a id="more"></a>

<h2 id="角色關係"><a href="#角色關係" class="headerlink" title="角色關係"></a>角色關係</h2><p>懶得解釋故事的人物關係，wikipedia很棒都整理好了～ <a href="https://zh.wikipedia.org/wiki/%E9%8B%92%E8%BF%B4%E8%B7%AF%E8%BD%89" target="_blank" rel="noopener">可點這裡</a></p>
<ul>
<li><p>Harlan哈蘭 知名犯罪小說家<br>85歲生日當天邀請全家人參加生日聚會，於當晚聚會後被殺。<br>有三個孩子：女兒琳達、已過世的大兒子尼爾、小兒子華特，並有三名孫子女。</p>
</li>
<li><p>Marta 哈蘭的護士<br>和哈蘭關係最好，哈蘭生前很照顧他。不能說謊，只要一說謊就會嘔吐。</p>
</li>
<li><p>Blanc 知名私家偵探<br>被匿名委托調查哈蘭死亡案</p>
</li>
<li><p>Ransom 哈蘭的孫子<br>琳達與李察的兒子，是個無業的花花公子。</p>
</li>
</ul>
<p>其實一開始劇情就很明顯告訴有人被殺了，是一場家族兇殺案。harlan 在85歲生日邀請了全家參加生日party，結果party結束晚上就死了，至於在party過程中發生了什麼事，大家就自己去看啦，來談談一些我看到的感受。</p>
<h2 id="耳目一新"><a href="#耳目一新" class="headerlink" title="耳目一新"></a>耳目一新</h2><p>怎麼說耳目一新呢，一般看懸疑或者偵探片，真相總是到最後才會出現，沒想到這部電影一開始就把各個角色與harlan當晚發生的疑點都提前告知，甚至連女主角護士marta的作案過程都先告訴觀眾。我還按了暫停鍵，發現還不到1小時，怎麼可能那麼快就讓我知道真相，就會讓人更有興趣往下去看劇情做猜想，果真故事不簡單，這樣的劇情編排我覺得蠻創新的。</p>
<h2 id="善良是中心思想"><a href="#善良是中心思想" class="headerlink" title="善良是中心思想"></a>善良是中心思想</h2><p>大概這部電影帶給我最大的觀感，在Marta和管家會面的那一刻，而當時管家快死的時候，道出了真兇。Marta以為管家知道自己是兇手，當時的狀況是如果讓管家活著那Marta很快就會被供出，而Marta自己和家人都可能被拖累。<em>但她最終還是因為善良救了管家。</em> </p>
<p>Harlan為了保護Marta而選擇自殺，<em>也是因為善良和愛。</em></p>
<p>當自身利益被威脅的時候，是否你還是會因為善良而犧牲自己？<br>其實我覺得很多人不是不知道自己被虧待，而是因為善良而不去計較，也覺得沒什麼好計較。<br>但也有些人覺得自身利益就是王道，資本主義就是這樣得以運行，社會本該如此。<br>而有些人覺得就是因為善良被人傷害，而慢慢選擇保護自己，慢慢自身利益顯得更有價值。</p>
<p>哈哈，都沒什麼不好，也不做評論，只是做些思考，我們很多時候是怎樣的人呢？ 似乎從中達到平衡確實很需要智慧。</p>
<p><img src="https://i.imgur.com/J2rY5Cd.jpg" alt=""></p>
<h2 id="誠實豆沙包-Marta"><a href="#誠實豆沙包-Marta" class="headerlink" title="誠實豆沙包 Marta"></a>誠實豆沙包 Marta</h2><p>覺得這個設定很有趣，Marta只要說謊就會吐，那時候我就心想這應該很快破案了吧，但我錯了。但覺得這樣的設定，似乎在述說，在紛亂的世界，仍有人誠實的活著。這世界很容易讓我們說謊，說謊騙別人你過得還可以，說謊騙自己你其實很快樂，騙自己能力還不錯，騙自己還可以懶惰。</p>
<p>anyway願我們對自己誠實以對，不開心就不開心，不會就不會，接受那樣的自己，才能變得更好。</p>
<h2 id="黑色幽默"><a href="#黑色幽默" class="headerlink" title="黑色幽默"></a>黑色幽默</h2><p>這部戲其實節奏捉得很好，還有點幽默感，就像Ransom説的什麼cis肯德基叔叔或者偵探講的甜甜圈，有點無釐頭，但為這部戲懸疑氛圍加分不少，雖然我不懂美式幽默，但有了配樂或是動作表情，有時候笑就是了。</p>
<h2 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h2><p>今天得知了新加坡lock down的消息，馬來西亞也lock down 兩個禮拜多了，生活呀，不論多殘酷，找點開心的事做，別忘了笑唷，有時候笑就是了。take care everyone.</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Data Types#7</title>
    <url>/2020/04/04/js-w3s7/</url>
    <content><![CDATA[<p>JavaScript variables can hold many data types: numbers, strings, booleans,undefined, objects and function.</p>
<a id="more"></a>

<h3 id="1-Numbers"><a href="#1-Numbers" class="headerlink" title="1.Numbers"></a>1.Numbers</h3><p>Numbers can be written with, or without decimals<br>Extra large or extra small numbers can be written with scientific (exponential) notation</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x1 = <span class="number">34.00</span>;     <span class="comment">// Written with decimals</span></span><br><span class="line"><span class="keyword">var</span> x2 = <span class="number">34</span>;        <span class="comment">// Written without decimals</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">123e5</span>;      <span class="comment">// 12300000</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Strings"><a href="#2-Strings" class="headerlink" title="2.Strings"></a>2.Strings</h3><p>Strings are written with quotes. You can use single or double quotes:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carName1 = <span class="string">"Volvo XC60"</span>;   <span class="comment">// Using double quotes</span></span><br><span class="line"><span class="keyword">var</span> carName2 = <span class="string">'Volvo XC60'</span>;   <span class="comment">// Using single quotes</span></span><br><span class="line"><span class="keyword">var</span> answer2 = <span class="string">"He is called 'Johnny'"</span>;    <span class="comment">// Single quotes inside double quotes</span></span><br><span class="line"><span class="keyword">var</span> answer3 = <span class="string">'He is called "Johnny"'</span>;    <span class="comment">// Double quotes inside single quotes</span></span><br></pre></td></tr></table></figure>


<h3 id="3-Booleans"><a href="#3-Booleans" class="headerlink" title="3.Booleans"></a>3.Booleans</h3><p>Booleans can only have two values: true or false.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> z = <span class="number">6</span>;</span><br><span class="line">(x == y)       <span class="comment">// Returns true</span></span><br><span class="line">(x == z)       <span class="comment">// Returns false</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Undefined"><a href="#4-Undefined" class="headerlink" title="4.Undefined"></a>4.Undefined</h3><p>In JavaScript, a variable without a value, has the value undefined. The type is also undefined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> car;    <span class="comment">// Value is undefined, type is undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="5-Objects"><a href="#5-Objects" class="headerlink" title="5.Objects"></a>5.Objects</h3><p>JavaScript objects are written with curly braces {}.<br>Object properties are written as name:value pairs, separated by commas.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">"John"</span>, <span class="attr">lastName</span>:<span class="string">"Doe"</span>, <span class="attr">age</span>:<span class="number">50</span>, <span class="attr">eyeColor</span>:<span class="string">"blue"</span>&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="6-Function"><a href="#6-Function" class="headerlink" title="6. Function"></a>6. Function</h3><p>The typeof operator does not return “object” for functions.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>)</span>&#123;&#125;   <span class="comment">// Returns "function"</span></span><br></pre></td></tr></table></figure>



<h3 id="7-Others"><a href="#7-Others" class="headerlink" title="7.Others"></a>7.Others</h3><ul>
<li><h4 id="The-Concept-of-Data-Types"><a href="#The-Concept-of-Data-Types" class="headerlink" title="The Concept of Data Types"></a>The Concept of Data Types</h4><p>When adding a number and a string, JavaScript will treat the number as a string.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">16</span> + <span class="string">"Volvo"</span>;  <span class="comment">//16Volvo</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"Volvo"</span> + <span class="number">16</span>;  <span class="comment">//Volvo16</span></span><br></pre></td></tr></table></figure>
<p>JavaScript evaluates expressions from left to right. Different sequences can produce different results:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">16</span> + <span class="number">4</span> + <span class="string">"Volvo"</span>;  <span class="comment">//20Volvo  treats 16 and 4 as numbers</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"Volvo"</span> + <span class="number">16</span> + <span class="number">4</span>;  <span class="comment">//Volvo164 first operand is a string, all operands are treated as strings.</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="JavaScript-Types-are-Dynamic"><a href="#JavaScript-Types-are-Dynamic" class="headerlink" title="JavaScript Types are Dynamic"></a>JavaScript Types are Dynamic</h4><p>the same variable can be used to hold different data types:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;           <span class="comment">// Now x is undefined</span></span><br><span class="line">x = <span class="number">5</span>;           <span class="comment">// Now x is a Number</span></span><br><span class="line">x = <span class="string">"John"</span>;      <span class="comment">// Now x is a String</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><p>written with square brackets [], array items are separated by commas.<br>The typeof operator returns “object” for arrays because in JavaScript arrays are objects.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars = [<span class="string">"Saab"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>]; <span class="comment">//type:object</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><h4 id="The-typeof-Operator"><a href="#The-typeof-Operator" class="headerlink" title="The typeof Operator"></a>The typeof Operator</h4><p>You can use the JavaScript typeof operator to find the type of a JavaScript variable.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">"John Doe"</span>     <span class="comment">// Returns "string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">3.14</span>           <span class="comment">// Returns "number"</span></span><br><span class="line"><span class="keyword">typeof</span> (<span class="number">3</span> + <span class="number">4</span>)        <span class="comment">// Returns "number"</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Empty-Values"><a href="#Empty-Values" class="headerlink" title="Empty Values"></a>Empty Values</h4><p>An empty value has nothing to do with undefined.<br>An empty string has both a legal value and a type.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> car = <span class="string">""</span>;    <span class="comment">// The value is "", the typeof is "string"</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p>in JavaScript, the data type of null is an object.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">"John"</span>, <span class="attr">lastName</span>:<span class="string">"Doe"</span>, <span class="attr">age</span>:<span class="number">50</span>, <span class="attr">eyeColor</span>:<span class="string">"blue"</span>&#125;;</span><br><span class="line">person = <span class="literal">null</span>;    <span class="comment">// Now value is null, but type is still an object</span></span><br></pre></td></tr></table></figure>
<p>You can also empty an object by setting it to undefined:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">"John"</span>, <span class="attr">lastName</span>:<span class="string">"Doe"</span>, <span class="attr">age</span>:<span class="number">50</span>, <span class="attr">eyeColor</span>:<span class="string">"blue"</span>&#125;;</span><br><span class="line">person = <span class="literal">undefined</span>;   <span class="comment">// Now both value and type is undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Difference-Between-Undefined-and-Null"><a href="#Difference-Between-Undefined-and-Null" class="headerlink" title="Difference Between Undefined and Null"></a>Difference Between Undefined and Null</h4><p>undefined and null are equal in value but different in type:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>           <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>         <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>          <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Primitive-Data"><a href="#Primitive-Data" class="headerlink" title="Primitive Data"></a>Primitive Data</h4><p>A primitive data value is a single simple data value with no additional properties and methods.<br>The typeof operator can return one of these primitive types: string, number, boolean and undefined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">"John"</span>              <span class="comment">// Returns "string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">3.14</span>                <span class="comment">// Returns "number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>                <span class="comment">// Returns "boolean"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>               <span class="comment">// Returns "boolean"</span></span><br><span class="line"><span class="keyword">typeof</span> x                   <span class="comment">// Returns "undefined" (if x has no value)</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Complex-Data"><a href="#Complex-Data" class="headerlink" title="Complex Data"></a>Complex Data</h4><p>The typeof operator can return one of two complex types:function and object.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">34</span>&#125; <span class="comment">// Returns "object"</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]             <span class="comment">// Returns "object" </span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                  <span class="comment">// Returns "object"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>)</span>&#123;&#125;   <span class="comment">// Returns "function"</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>w3school</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Syntax - Operators#6</title>
    <url>/2020/04/04/js-w3s6/</url>
    <content><![CDATA[<p>JavaScript uses arithmetic operators<code>( + - * / )</code> to compute values</p>
<p>JavaScript uses an assignment operator <code>( = )</code> to assign values to variables,not an “equal to” operator.</p>
<p>The “equal to” operator is written like <code>==</code> in JavaScript.</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">5</span> + <span class="number">6</span>) * <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> x, y;</span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line">y = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>

<h2 id="1-Arithmetic-Operators"><a href="#1-Arithmetic-Operators" class="headerlink" title="1. Arithmetic Operators"></a>1. Arithmetic Operators</h2><p>Arithmetic operators are used to perform arithmetic on numbers:<br>![](<a href="https://i.imgur.com/I0T9IWE.png" target="_blank" rel="noopener">https://i.imgur.com/I0T9IWE.png</a> =400x250)</p>
<ul>
<li><h3 id="Adding-Subtracting-Multiplying-Dividing-Remainder"><a href="#Adding-Subtracting-Multiplying-Dividing-Remainder" class="headerlink" title="Adding /Subtracting/Multiplying/Dividing/Remainder"></a>Adding /Subtracting/Multiplying/Dividing/Remainder</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> z = x + y; <span class="comment">//7</span></span><br><span class="line"><span class="keyword">var</span> z = x - y; <span class="comment">//3</span></span><br><span class="line"><span class="keyword">var</span> z = x * y; <span class="comment">//10</span></span><br><span class="line"><span class="keyword">var</span> z = x / y; <span class="comment">//2.5</span></span><br><span class="line"><span class="keyword">var</span> z = x % y; <span class="comment">//1</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="Incrementing-Decrementing"><a href="#Incrementing-Decrementing" class="headerlink" title="Incrementing/Decrementing"></a>Incrementing/Decrementing</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; 5;</span><br><span class="line">x++;</span><br><span class="line">var z &#x3D; x; &#x2F;&#x2F;6</span><br><span class="line">x--;</span><br><span class="line">var z &#x3D; x; &#x2F;&#x2F;4</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="Exponentiation"><a href="#Exponentiation" class="headerlink" title="Exponentiation"></a>Exponentiation</h3><p>x ** y produces the same result as Math.pow(x,y):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; 5;</span><br><span class="line">var z &#x3D; x ** 2;   &#x2F;&#x2F;25</span><br><span class="line">var z &#x3D; Math.pow(x,2);   &#x2F;&#x2F; 25</span><br></pre></td></tr></table></figure></li>
<li><h3 id="Operator-Precedence"><a href="#Operator-Precedence" class="headerlink" title="Operator Precedence"></a>Operator Precedence</h3><p>Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; 100 + 50 * 3; &#x2F;&#x2F;250</span><br><span class="line">var x &#x3D; (100 + 50) * 3; &#x2F;&#x2F;450</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="Operator-Precedence-Values"><a href="#Operator-Precedence-Values" class="headerlink" title="Operator Precedence Values"></a>Operator Precedence Values</h3><p><img src="https://i.imgur.com/dvMLUJ0.png" alt=""></p>
</li>
</ul>
<hr>
<h2 id="2-Assignment-Operators"><a href="#2-Assignment-Operators" class="headerlink" title="2. Assignment Operators"></a>2. Assignment Operators</h2><p>Assignment operators assign values to JavaScript variables.</p>
<p><img src="https://i.imgur.com/TaFk8I8.png" alt=""><br><a href="https://www.w3schools.com/js/js_operators.asp" target="_blank" rel="noopener"><em>image source</em>
</a></p>
<blockquote>
<p>The **= operator is an experimental part of the ECMAScript 2016 proposal (ES7). It is not stable across browsers. Do not use it.</p>
</blockquote>
<p>example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">x += <span class="number">5</span>; <span class="comment">//15</span></span><br><span class="line">x -= <span class="number">5</span>; <span class="comment">//5</span></span><br><span class="line">x *= <span class="number">5</span>; <span class="comment">//50</span></span><br><span class="line">x /= <span class="number">5</span>;  <span class="comment">//2</span></span><br><span class="line">x %= <span class="number">5</span>;  <span class="comment">//0</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="3-String-Operators"><a href="#3-String-Operators" class="headerlink" title="3. String Operators"></a>3. String Operators</h2><p>The + operator can also be used to add (concatenate) strings.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txt1 = <span class="string">"John"</span>;</span><br><span class="line"><span class="keyword">var</span> txt2 = <span class="string">"Doe"</span>;</span><br><span class="line"><span class="keyword">var</span> txt3 = txt1 + <span class="string">" "</span> + txt2;  <span class="comment">//John Doe</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="4-Adding-Strings-and-Numbers"><a href="#4-Adding-Strings-and-Numbers" class="headerlink" title="4. Adding Strings and Numbers"></a>4. Adding Strings and Numbers</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="string">"5"</span> + <span class="number">5</span>;   <span class="comment">//55</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="string">"Hello"</span> + <span class="number">5</span>; <span class="comment">//Hello5</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="5-Comparison-Operators"><a href="#5-Comparison-Operators" class="headerlink" title="5. Comparison Operators"></a>5. Comparison Operators</h2><p><img src="https://i.imgur.com/NogKf0N.png" alt=""></p>
<ul>
<li><h3 id="Ternary-Operator"><a href="#Ternary-Operator" class="headerlink" title="Ternary Operator"></a>Ternary Operator</h3><p>Syntax:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">variablename &#x3D; (condition) ? value1:value2</span><br></pre></td></tr></table></figure>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> voteable = (age &lt; <span class="number">18</span>) ? <span class="string">"Too young"</span>:<span class="string">"Old enough"</span>; <span class="comment">//Old enough</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="Test-true-or-false"><a href="#Test-true-or-false" class="headerlink" title="Test true or false"></a>Test true or false</h3><p>Given that x = 5</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x == <span class="number">8</span>	 <span class="comment">//false</span></span><br><span class="line">x == <span class="number">5</span> <span class="comment">//true</span></span><br><span class="line">x == <span class="string">"5"</span>	<span class="comment">//true</span></span><br><span class="line">x === <span class="number">5</span>	 <span class="comment">//true</span></span><br><span class="line">x === <span class="string">"5"</span>	<span class="comment">//false</span></span><br><span class="line">x != <span class="number">8</span>	<span class="comment">//true</span></span><br><span class="line">x !== <span class="number">5</span>	 <span class="comment">//false</span></span><br><span class="line">x !== <span class="string">"5"</span>	<span class="comment">//true	</span></span><br><span class="line">x !== <span class="number">8</span>	 <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="Comparing-Different-Types"><a href="#Comparing-Different-Types" class="headerlink" title="Comparing Different Types"></a>Comparing Different Types</h3><p>When comparing a string with a number, JavaScript will convert the string to a number when doing the comparison.<br>A non-numeric string converts to NaN which is always false.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> &lt; <span class="string">"12"</span>	<span class="comment">//true cover a string to number</span></span><br><span class="line"><span class="number">2</span> &lt; <span class="string">"John"</span>	<span class="comment">//false  NaN </span></span><br><span class="line"><span class="number">2</span> &gt; <span class="string">"John"</span>	<span class="comment">//false  NaN </span></span><br><span class="line"><span class="number">2</span> == <span class="string">"John"</span>	<span class="comment">//false  NaN </span></span><br><span class="line"><span class="string">"2"</span> &lt; <span class="string">"12"</span>	<span class="comment">//false </span></span><br><span class="line"><span class="string">"2"</span> &gt; <span class="string">"12"</span>  <span class="comment">//true  //"2" will be greater than "12", because (alphabetically) 1 is less than 2.</span></span><br><span class="line"><span class="string">"2"</span> == <span class="string">"12"</span>	 <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="6-Logical-Operators"><a href="#6-Logical-Operators" class="headerlink" title="6.Logical Operators"></a>6.Logical Operators</h2><p><img src="https://i.imgur.com/5QBYbmG.png" alt=""></p>
<p>Example:<br>Given that x = 6 and y = 3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(x &lt; 10 &amp;&amp; y &gt; 1)  &#x2F;&#x2F;true</span><br><span class="line">(x &#x3D;&#x3D; 5 || y &#x3D;&#x3D; 5)  &#x2F;&#x2F;false</span><br><span class="line">!(x &#x3D;&#x3D; y)  &#x2F;&#x2F;false</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-Bitwise-Operators"><a href="#7-Bitwise-Operators" class="headerlink" title="7.Bitwise Operators"></a>7.Bitwise Operators</h2><p><img src="https://i.imgur.com/xFprLH7.png" alt=""></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>w3school</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Syntax - Value#5</title>
    <url>/2020/04/04/js-w3s5/</url>
    <content><![CDATA[<p>Fixed values are called literals. Variable values are called variables.</p>
<a id="more"></a>

<h3 id="literals"><a href="#literals" class="headerlink" title="literals"></a>literals</h3><ul>
<li>Numbers are written with or without decimals:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">10.50</span> or <span class="number">1001</span></span><br></pre></td></tr></table></figure></li>
<li>Strings are text, written within double or single quotes:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"John Doe"</span> or <span class="string">'John Doe'</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><ul>
<li><p>JavaScript uses the var keyword to declare variables.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;   x = <span class="number">6</span>;  or</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Start the statement with var and separate the variables by comma:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">"John Doe"</span>, carName = <span class="string">"Volvo"</span>, price = <span class="number">200</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Re-Declaring Variables<br>If you re-declare a JavaScript variable, it will not lose its value.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carName = <span class="string">"Volvo"</span>;</span><br><span class="line"><span class="keyword">var</span> carName;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Arithmetic<br>As with algebra, you can do arithmetic with JavaScript variables, using operators like = and +:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span> + <span class="number">2</span> + <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dollar Sign $<br>Remember that JavaScript identifiers (names) must begin with:<br>A letter (A-Z or a-z)<br>A dollar sign ($)<br>Or an underscore (_)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> $myMoney = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> _lastName = <span class="string">"Johnson"</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>A variable declared without a value will have the value undefined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carName; <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>w3school</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Statements#4</title>
    <url>/2020/04/04/js-w3s4/</url>
    <content><![CDATA[<h3 id="1-Semicolons"><a href="#1-Semicolons" class="headerlink" title="1.Semicolons"></a>1.Semicolons</h3><a id="more"></a>

<p>Add a semicolon at the end of each executable statement:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c;     <span class="comment">// Declare 3 variables</span></span><br><span class="line">a = <span class="number">5</span>;           <span class="comment">// Assign the value 5 to a</span></span><br><span class="line">b = <span class="number">6</span>;           <span class="comment">// Assign the value 6 to b</span></span><br><span class="line">c = a + b;      <span class="comment">// Assign the sum of a and b to c</span></span><br><span class="line">a = <span class="number">5</span>; b = <span class="number">6</span>; c = a + b; <span class="comment">//multiple statements on one line are allowed</span></span><br></pre></td></tr></table></figure>

<h3 id="2-White-Space"><a href="#2-White-Space" class="headerlink" title="2.White Space"></a>2.White Space</h3><p>A good practice is to put spaces around operators ( = + - * / ):</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = y + z;</span><br><span class="line"><span class="keyword">var</span> person = <span class="string">"Hege"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-Line-Length-and-Line-Breaks"><a href="#3-Line-Length-and-Line-Breaks" class="headerlink" title="3.Line Length and Line Breaks"></a>3.Line Length and Line Breaks</h3><p>If a JavaScript statement does not fit on one line, the best place to break it is after an operator</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML =</span><br><span class="line"><span class="string">"Hello Dolly!"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-Code-Blocks"><a href="#4-Code-Blocks" class="headerlink" title="4.Code Blocks{}"></a>4.Code Blocks{}</h3><p>The purpose of code blocks is to define statements to be executed together.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"demo1"</span>).innerHTML = <span class="string">"Hello Dolly!"</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"demo2"</span>).innerHTML = <span class="string">"How are you?"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-Keywords"><a href="#5-Keywords" class="headerlink" title="5.Keywords"></a>5.Keywords</h3><p>In JavaScript you cannot use these reserved words as variables, labels, or function names:<br><a href="https://www.w3schools.com/js/js_reserved.asp" target="_blank" rel="noopener">https://www.w3schools.com/js/js_reserved.asp</a></p>
<h3 id="6-Comments"><a href="#6-Comments" class="headerlink" title="6.Comments"></a>6.Comments</h3><p>Code after double slashes <code>//</code> or between <code>/*</code> and <code>*/</code> is treated as a comment.</p>
<ul>
<li><h4 id="Single-Line-Comments"><a href="#Single-Line-Comments" class="headerlink" title="Single Line Comments"></a>Single Line Comments</h4><p>Single line comments start with //.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Change heading:</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myH"</span>).innerHTML = <span class="string">"My First Page"</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Multi-line-Comments"><a href="#Multi-line-Comments" class="headerlink" title="Multi-line Comments"></a>Multi-line Comments</h4><p>Multi-line comments start with /* and end with */.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The code below will change</span></span><br><span class="line"><span class="comment">the heading with id = "myH"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-Others"><a href="#7-Others" class="headerlink" title="7. Others"></a>7. Others</h3><ul>
<li>Numbers are not allowed as the first character.</li>
<li>In JavaScript, the first character must be a letter, or an underscore (_), or a dollar sign ($).</li>
<li>All JavaScript identifiers are case sensitive.</li>
<li>JavaScript does not interpret VAR or Var as the keyword var.</li>
<li>Hyphens are not allowed in JavaScript. They are reserved for subtractions. (ex.<code>first-name</code>)</li>
<li>Underscore <code>first_name</code>/Upper Camel Case<code>FirstName</code> /Lower Camel Case <code>firstName</code> are allowed in JavaScript.</li>
<li>JavaScript programmers tend to use camel case that starts with a lowercase letter  (ex.<code>firstName</code>)</li>
<li>JavaScript uses the Unicode character set. <a href="https://www.w3schools.com/charsets/ref_html_utf8.asp" target="_blank" rel="noopener">Complete Unicode Reference.</a></li>
<li>All JavaScript variables must be identified with unique names.</li>
<li>Reserved words <a href="https://www.w3schools.com/js/js_statements.asp" target="_blank" rel="noopener">(like JavaScript keywords)</a> cannot be used as names </li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>w3school</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Output#3</title>
    <url>/2020/04/04/js-w3s3/</url>
    <content><![CDATA[<p>There’re five output in javascript :<br>innerHTML / document.write() /  window.alert() / console.log() / window.print()</p>
<a id="more"></a>


<h3 id="1-Using-innerHTML"><a href="#1-Using-innerHTML" class="headerlink" title="1.Using innerHTML"></a>1.Using innerHTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="number">5</span> + <span class="number">6</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Changing the innerHTML property of an HTML element is a common way to display data in HTML.</li>
</ul>
<h3 id="2-Using-document-write"><a href="#2-Using-document-write" class="headerlink" title="2.Using document.write()"></a>2.Using document.write()</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My first paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="number">5</span> + <span class="number">6</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Using document.write() after an HTML document is loaded, will delete all existing HTML</li>
<li>The document.write() method should only be used for testing.</li>
</ul>
<h3 id="3-Using-window-alert"><a href="#3-Using-window-alert" class="headerlink" title="3.Using window.alert()"></a>3.Using window.alert()</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.alert(<span class="number">5</span> + <span class="number">6</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Using-console-log-commonly-used"><a href="#4-Using-console-log-commonly-used" class="headerlink" title="4. Using console.log()  *(commonly used)"></a>4. Using console.log()  <em>*(commonly used)</em></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="number">5</span> + <span class="number">6</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>For debugging purposes, you can call the console.log() method in the browser to display data.</li>
</ul>
<h3 id="5-JavaScript-Print"><a href="#5-JavaScript-Print" class="headerlink" title="5. JavaScript Print"></a>5. JavaScript Print</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"window.print()"</span>&gt;</span>Print this page<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>w3school</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Where To#2</title>
    <url>/2020/04/04/js-w3s2/</url>
    <content><![CDATA[<p>Where can place scipts at the html? Head? Body? External? or External References?</p>
<blockquote>
<p>Old JavaScript examples may use a type attribute:<code>&lt;script type=&quot;text/javascript&quot;&gt;.</code><br>The type attribute is not required. JavaScript is the default scripting language in HTML.</p>
</blockquote>
<a id="more"></a>


<h3 id="1-JavaScript-in-Head"><a href="#1-JavaScript-in-Head" class="headerlink" title="1.JavaScript in Head"></a>1.JavaScript in Head</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"My First JavaScript"</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="2-JavaScript-in-Body"><a href="#2-JavaScript-in-Body" class="headerlink" title="2.JavaScript in Body"></a>2.JavaScript in Body</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"My First JavaScript"</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-External-JavaScript-commonly-used"><a href="#3-External-JavaScript-commonly-used" class="headerlink" title="3.External JavaScript  *(commonly used)"></a>3.External JavaScript  <em>*(commonly used)</em></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>A Paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"script2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   //add several script files</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Scripts can also be placed in external files (script.js) :</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"My First JavaScript"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>,myFunction);</span><br></pre></td></tr></table></figure>

<ul>
<li>External scripts cannot contain <code>&lt;script&gt;</code> tags.</li>
<li>It separates HTML and code</li>
<li>It makes HTML and JavaScript easier to read and maintain</li>
<li>Cached JavaScript files can speed up page loads</li>
</ul>
<p><img src="https://i.imgur.com/A1A5LPI.png" alt=""></p>
<h3 id="4-External-References-commonly-used"><a href="#4-External-References-commonly-used" class="headerlink" title="4.External References *(commonly used)"></a>4.External References <em>*(commonly used)</em></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.w3schools.com/js/myScript1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>can be referenced with a full URL or with a path relative to the current web page.</li>
<li>can import the javaScript Package from<a href="https://cdnjs.com/" target="_blank" rel="noopener"> cdnjs</a> , it can make the Javascript resources load faster.</li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>w3school</tag>
      </tags>
  </entry>
  <entry>
    <title>Why JavaScript#1</title>
    <url>/2020/04/03/js_w3s1/</url>
    <content><![CDATA[<p>This is the weekly writing challenge, i hope i can do it.<br>Now is the perfect time to make a fresh start. </p>
<a id="more"></a>

<h2 id="Why-Study-JavaScript"><a href="#Why-Study-JavaScript" class="headerlink" title="Why Study JavaScript?"></a>Why Study JavaScript?</h2><p>JavaScript is one of the 3 languages all web developers must learn:</p>
<ul>
<li>HTML to define the content of web pages</li>
<li>CSS to specify the layout of web pages</li>
<li>JavaScript to program the behavior of web pages</li>
</ul>
<h2 id="What-Can-JavaScript-Do"><a href="#What-Can-JavaScript-Do" class="headerlink" title="What Can JavaScript Do?"></a>What Can JavaScript Do?</h2><h4 id="1-JavaScript-Can-Change-HTML-Content"><a href="#1-JavaScript-Can-Change-HTML-Content" class="headerlink" title="1. JavaScript Can Change HTML Content"></a>1. JavaScript Can Change HTML Content</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>JavaScript can change HTML content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"hello JavaScript"</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-JavaScript-Can-Change-HTML-Attribute-Values"><a href="#2-JavaScript-Can-Change-HTML-Attribute-Values" class="headerlink" title="2. JavaScript Can Change HTML Attribute Values"></a>2. JavaScript Can Change HTML Attribute Values</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"myImage"</span> <span class="attr">src</span>=<span class="string">"pic_bulboff.gif"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'myImage'</span>).src=<span class="string">'pic_bulbon.gif'</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-JavaScript-Can-Change-HTML-Styles-CSS"><a href="#3-JavaScript-Can-Change-HTML-Styles-CSS" class="headerlink" title="3. JavaScript Can Change HTML Styles (CSS)"></a>3. JavaScript Can Change HTML Styles (CSS)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>change the font size<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).style.fontSize=<span class="string">'35px'</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-JavaScript-Can-Hide-HTML-Elements"><a href="#4-JavaScript-Can-Hide-HTML-Elements" class="headerlink" title="4. JavaScript Can Hide HTML Elements"></a>4. JavaScript Can Hide HTML Elements</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>Hello JavaScript!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).style.display = <span class="string">"none"</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-JavaScript-Can-Show-HTML-Elements"><a href="#5-JavaScript-Can-Show-HTML-Elements" class="headerlink" title="5. JavaScript Can Show HTML Elements"></a>5. JavaScript Can Show HTML Elements</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span>Hello JavaScript!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).style.display=<span class="string">'block'</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>w3school</tag>
      </tags>
  </entry>
  <entry>
    <title>Iris&#39;s Quote</title>
    <url>/2020/04/02/irisQuote/</url>
    <content><![CDATA[<p>不時會更新blog banner文字， 想要用文字記錄每一刻想留下的溫度，歡迎把把文字帶走。</p>
<a id="more"></a>

<h1 id="把文字帶走"><a href="#把文字帶走" class="headerlink" title="把文字帶走"></a>把文字帶走</h1><p>希望未來的自己看到文字時，可以再此相遇多年前不同感受的自己。</p>
<ul>
<li>2020/3/1 為每一件小事更勇敢</li>
<li>2020/3/25 人都有權利悲傷，但一定要讓自己更快樂才行。 -李千那</li>
<li>2020/4/2 生活除了是每個月5號，還有詩和遠方。</li>
</ul>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>irisQuote</tag>
      </tags>
  </entry>
  <entry>
    <title>2019總結 與 2020目標</title>
    <url>/2020/03/07/throwback2019/</url>
    <content><![CDATA[<p>時間過太快，已經3月了，決定快速寫篇2019回顧，及2020目標。</p>
<a id="more"></a>

<h1 id="回顧-2019"><a href="#回顧-2019" class="headerlink" title="回顧 2019"></a>回顧 2019</h1><ul>
<li>2019/1/1 體驗了日本跨年儀式，在神社抽了2019的第一個籤</li>
<li>吃了很多很好吃的拉麵和沾麵 滿足（想念</li>
<li>去了很想去的 Disneyland &amp; Universal</li>
<li>離開了上家工作 感謝結交了一群好同事們</li>
<li>重拾學生身分 在中壢中央開啟了校園生活</li>
<li>認識了一幫很可愛一起奮鬥的同學</li>
<li>學會寫了程式，做了人生中第一個網站</li>
<li>跟同學們一起熬夜了很多天，只為了作品發表</li>
<li>面試了前端工程師的工作，第一次遇到了白板題</li>
<li>最後正式從行銷人轉行至前端工程師</li>
<li>家裡多了新成員 三哥&amp;三嫂結婚了～</li>
<li>去了韓國釜山 看了海雲台很熱但很美</li>
<li>因為搭紅眼飛機 我們居然在釜山水族館睡著了</li>
<li>突然很想念韓國炸雞/dobokki/冷面 真的好好吃</li>
<li>開工前回馬來西亞休息了2個禮拜 覺得很幸福</li>
<li>婆婆過世 記得在生日那天搭飛機回家默默哭了</li>
<li>吃了49天的素食 原來素食也可以很好吃</li>
<li>年底算是主辦了聖誕趴 看見了那麼多dd101同學覺得很感動</li>
<li>工作中開始遇到了很多bug 開啟了艱辛的debug人生</li>
</ul>
<h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><ul>
<li>過年回家 我家姪女長大了 講了好多話</li>
<li>家裡又新增新成員 二哥&amp;二嫂結婚了</li>
<li>第一次搭飛機口罩墨鏡戴好戴滿 還一人躺平三個機位</li>
<li>第一次打壁球</li>
<li>終於架設了第一個自己的部落格</li>
<li>突然發現3月了好像沒做到什麼事，其他之後好好來補上</li>
</ul>
<h3 id="2020-目標"><a href="#2020-目標" class="headerlink" title="2020 目標"></a>2020 目標</h3><ul>
<li>每週一文章/筆記</li>
<li>每週一程式</li>
<li>每週一運動</li>
<li>減肥</li>
<li>去溜冰吧</li>
<li>把所有照片整理好</li>
<li>開始學習剪影片</li>
<li>去一個國家玩 （希望J個可以去</li>
<li>希望認識多點有趣的靈魂 （覺得生活圈越來越小</li>
<li>學好vue 和 react </li>
<li>好好禪定 好好生活</li>
<li>希望自己可以早點睡覺 大概目標是23：30</li>
<li>其他還沒想到</li>
</ul>
<p>然後疫情快快結束吧把吧 世界和平健康</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
</search>
